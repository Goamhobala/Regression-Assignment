`Pr(>|t|)` = c(p_beta_0, p_beta_1)
)
rownames(coefficients) <- c("(Intercept)", "traffic_density")
cat("Coefficients:\n")
print.data.frame(coefficients)
cat("\nResidual standard error:",sqrt(s2),"on 1 and", n-2, "DF" )
cat("\nMultiple R-squared:",R_squared, "Adjusted R-Squared: ",Adjusted_R_squared)
cat("\nF-statistic:",F_statistic, "on 1 and", n-2, "DF")
summary(lm(data_tidy_air_quality$particulate_matter~data_tidy_air_quality$traffic_density,data=data_tidy_air_quality))
n <- length(data_tidy_air_quality$traffic_density)
X_bar <- mean(data_tidy_air_quality$traffic_density)
Y_bar <- mean(data_tidy_air_quality$particulate_matter)
X <- cbind(1,data_tidy_air_quality$traffic_density)
Y <-data_tidy_air_quality$particulate_matter
bhat <- solve(t(X) %*% X) %*% t(X) %*% Y
Cmat <- solve(t(X) %*% X)
k <- ncol(X)
rss <- t(Y - X %*% bhat) %*% (Y - X %*% bhat)
s2 <- as.numeric((rss)/n-k)
c_ii <- diag(Cmat)
std.error <- sqrt(s2 * c_ii)
t_beta_0<- bhat[1]/std.error[1]
t_beta_1<- bhat[2]/std.error[2]
p_beta_1 <-2* pt(2.066, df = n-k,lower.tail=FALSE)
p_beta_0 <-2* pt(t_beta_0, df = n-k,lower.tail=FALSE)
Y_hat <- bhat[1] + bhat[2]*data_tidy_air_quality$traffic_density
residuals <- data_tidy_air_quality$particulate_matter - Y_hat
SSE <- sum(residuals^2)
SST <- sum((data_tidy_air_quality$particulate_matter - Y_bar)^2)
R_squared <- (1 - (SSE / SST))
Adjusted_R_squared <- 1 - ((1 - R_squared) * (n - 1) / (n - 2 - 1))
F_statistic <- (SST - SSE) / (SSE / (n-2))
coefficients <- data.frame(
Estimate = c(bhat[1], bhat[2]),
`Std. Error` = c(std.error[1], std.error[2]),
`t value` = c(t_beta_0, t_beta_1),
`Pr(>|t|)` = c(p_beta_0, p_beta_1)
)
rownames(coefficients) <- c("(Intercept)", "traffic_density")
cat("Coefficients:\n")
print.data.frame(coefficients)
cat("\nResidual standard error:",sqrt(s2),"on 1 and", n-2, "DF" )
cat("\nMultiple R-squared:",R_squared, "Adjusted R-Squared: ",Adjusted_R_squared)
cat("\nF-statistic:",F_statistic, "on 1 and", n-2, "DF")
summary(lm(data_tidy_air_quality$particulate_matter~data_tidy_air_quality$traffic_density,data=data_tidy_air_quality))
n <- length(data_tidy_air_quality$traffic_density)
X_bar <- mean(data_tidy_air_quality$traffic_density)
Y_bar <- mean(data_tidy_air_quality$particulate_matter)
X <- cbind(1,data_tidy_air_quality$traffic_density)
Y <-data_tidy_air_quality$particulate_matter
bhat <- solve(t(X) %*% X) %*% t(X) %*% Y
Cmat <- solve(t(X) %*% X)
k <- ncol(X)
rss <- t(Y - X %*% bhat) %*% (Y - X %*% bhat)
s2 <- as.numeric((rss)/n-k)
c_ii <- diag(Cmat)
std.error <- sqrt(s2 * c_ii)
t_beta_0<- bhat[1]/std.error[1]
t_beta_1<- bhat[2]/std.error[2]
p_beta_1 <-2* pt(2.066, df = n-k,lower.tail=FALSE)
p_beta_0 <-2* pt(t_beta_0, df = n-k,lower.tail=FALSE)
Y_hat <- bhat[1] + bhat[2]*data_tidy_air_quality$traffic_density
residuals <- data_tidy_air_quality$particulate_matter - Y_hat
SSE <- sum(residuals^2)
SST <- sum((data_tidy_air_quality$particulate_matter - Y_bar)^2)
R_squared <- (1 - (SSE / SST))
Adjusted_R_squared <- 1 - ((1 - R_squared) * (n - 1) / (n - 2 - 1))
F_statistic <- (SST - SSE) / (SSE / (n-2))
coefficients <- data.frame(
Estimate = c(bhat[1], bhat[2]),
`Std. Error` = c(round(std.error[1],5), std.error[2]),
`t value` = c(t_beta_0, t_beta_1),
`Pr(>|t|)` = c(p_beta_0, p_beta_1)
)
rownames(coefficients) <- c("(Intercept)", "traffic_density")
cat("Coefficients:\n")
print.data.frame(coefficients)
cat("\nResidual standard error:",sqrt(s2),"on 1 and", n-2, "DF" )
cat("\nMultiple R-squared:",R_squared, "Adjusted R-Squared: ",Adjusted_R_squared)
cat("\nF-statistic:",F_statistic, "on 1 and", n-2, "DF")
summary(lm(data_tidy_air_quality$particulate_matter~data_tidy_air_quality$traffic_density,data=data_tidy_air_quality))
n <- length(data_tidy_air_quality$traffic_density)
X_bar <- mean(data_tidy_air_quality$traffic_density)
Y_bar <- mean(data_tidy_air_quality$particulate_matter)
X <- cbind(1,data_tidy_air_quality$traffic_density)
Y <-data_tidy_air_quality$particulate_matter
bhat <- solve(t(X) %*% X) %*% t(X) %*% Y
Cmat <- solve(t(X) %*% X)
k <- ncol(X)
rss <- t(Y - X %*% bhat) %*% (Y - X %*% bhat)
s2 <- as.numeric((rss)/n-k)
c_ii <- diag(Cmat)
std.error <- sqrt(s2 * c_ii)
t_beta_0<- bhat[1]/std.error[1]
t_beta_1<- bhat[2]/std.error[2]
p_beta_1 <-2* pt(2.066, df = n-k,lower.tail=FALSE)
p_beta_0 <-2* pt(t_beta_0, df = n-k,lower.tail=FALSE)
Y_hat <- bhat[1] + bhat[2]*data_tidy_air_quality$traffic_density
residuals <- data_tidy_air_quality$particulate_matter - Y_hat
SSE <- sum(residuals^2)
SST <- sum((data_tidy_air_quality$particulate_matter - Y_bar)^2)
R_squared <- (1 - (SSE / SST))
Adjusted_R_squared <- 1 - ((1 - R_squared) * (n - 1) / (n - 2 - 1))
F_statistic <- (SST - SSE) / (SSE / (n-2))
coefficients <- data.frame(
Estimate = c(bhat[1], bhat[2]),
`Std. Error` = c(round(std.error[1],digits = 5), std.error[2]),
`t value` = c(t_beta_0, t_beta_1),
`Pr(>|t|)` = c(p_beta_0, p_beta_1)
)
rownames(coefficients) <- c("(Intercept)", "traffic_density")
cat("Coefficients:\n")
print.data.frame(coefficients)
cat("\nResidual standard error:",sqrt(s2),"on 1 and", n-2, "DF" )
cat("\nMultiple R-squared:",R_squared, "Adjusted R-Squared: ",Adjusted_R_squared)
cat("\nF-statistic:",F_statistic, "on 1 and", n-2, "DF")
summary(lm(data_tidy_air_quality$particulate_matter~data_tidy_air_quality$traffic_density,data=data_tidy_air_quality))
n <- length(data_tidy_air_quality$traffic_density)
X_bar <- mean(data_tidy_air_quality$traffic_density)
Y_bar <- mean(data_tidy_air_quality$particulate_matter)
X <- cbind(1,data_tidy_air_quality$traffic_density)
Y <-data_tidy_air_quality$particulate_matter
bhat <- solve(t(X) %*% X) %*% t(X) %*% Y
Cmat <- solve(t(X) %*% X)
k <- ncol(X)
rss <- t(Y - X %*% bhat) %*% (Y - X %*% bhat)
s2 <- as.numeric((rss)/n-k)
c_ii <- diag(Cmat)
std.error <- sqrt(s2 * c_ii)
t_beta_0<- bhat[1]/std.error[1]
t_beta_1<- bhat[2]/std.error[2]
p_beta_1 <-2* pt(2.066, df = n-k,lower.tail=FALSE)
p_beta_0 <-2* pt(t_beta_0, df = n-k,lower.tail=FALSE)
Y_hat <- bhat[1] + bhat[2]*data_tidy_air_quality$traffic_density
residuals <- data_tidy_air_quality$particulate_matter - Y_hat
SSE <- sum(residuals^2)
SST <- sum((data_tidy_air_quality$particulate_matter - Y_bar)^2)
R_squared <- (1 - (SSE / SST))
Adjusted_R_squared <- 1 - ((1 - R_squared) * (n - 1) / (n - 2 - 1))
F_statistic <- (SST - SSE) / (SSE / (n-2))
coefficients <- data.frame(
Estimate = c(bhat[1], bhat[2]),
`Std. Error` = c(round(std.error[1],digits = 3), std.error[2]),
`t value` = c(t_beta_0, t_beta_1),
`Pr(>|t|)` = c(p_beta_0, p_beta_1)
)
rownames(coefficients) <- c("(Intercept)", "traffic_density")
cat("Coefficients:\n")
print.data.frame(coefficients)
cat("\nResidual standard error:",sqrt(s2),"on 1 and", n-2, "DF" )
cat("\nMultiple R-squared:",R_squared, "Adjusted R-Squared: ",Adjusted_R_squared)
cat("\nF-statistic:",F_statistic, "on 1 and", n-2, "DF")
summary(lm(data_tidy_air_quality$particulate_matter~data_tidy_air_quality$traffic_density,data=data_tidy_air_quality))
n <- length(data_tidy_air_quality$traffic_density)
X_bar <- mean(data_tidy_air_quality$traffic_density)
Y_bar <- mean(data_tidy_air_quality$particulate_matter)
X <- cbind(1,data_tidy_air_quality$traffic_density)
Y <-data_tidy_air_quality$particulate_matter
bhat <- solve(t(X) %*% X) %*% t(X) %*% Y
Cmat <- solve(t(X) %*% X)
k <- ncol(X)
rss <- t(Y - X %*% bhat) %*% (Y - X %*% bhat)
s2 <- as.numeric((rss)/n-k)
c_ii <- diag(Cmat)
std.error <- sqrt(s2 * c_ii)
std.error<-round(std.error,digits = 3)
t_beta_0<- bhat[1]/std.error[1]
t_beta_1<- bhat[2]/std.error[2]
p_beta_1 <-2* pt(2.066, df = n-k,lower.tail=FALSE)
p_beta_0 <-2* pt(t_beta_0, df = n-k,lower.tail=FALSE)
Y_hat <- bhat[1] + bhat[2]*data_tidy_air_quality$traffic_density
residuals <- data_tidy_air_quality$particulate_matter - Y_hat
SSE <- sum(residuals^2)
SST <- sum((data_tidy_air_quality$particulate_matter - Y_bar)^2)
R_squared <- (1 - (SSE / SST))
Adjusted_R_squared <- 1 - ((1 - R_squared) * (n - 1) / (n - 2 - 1))
F_statistic <- (SST - SSE) / (SSE / (n-2))
coefficients <- data.frame(
Estimate = c(bhat[1], bhat[2]),
`Std. Error` = c(std.error[1], std.error[2],
`t value` = c(t_beta_0, t_beta_1),
`Pr(>|t|)` = c(p_beta_0, p_beta_1)
)
rownames(coefficients) <- c("(Intercept)", "traffic_density")
n <- length(data_tidy_air_quality$traffic_density)
X_bar <- mean(data_tidy_air_quality$traffic_density)
Y_bar <- mean(data_tidy_air_quality$particulate_matter)
X <- cbind(1,data_tidy_air_quality$traffic_density)
Y <-data_tidy_air_quality$particulate_matter
bhat <- solve(t(X) %*% X) %*% t(X) %*% Y
Cmat <- solve(t(X) %*% X)
k <- ncol(X)
rss <- t(Y - X %*% bhat) %*% (Y - X %*% bhat)
s2 <- as.numeric((rss)/n-k)
c_ii <- diag(Cmat)
std.error <- sqrt(s2 * c_ii)
std.error<-round(std.error,digits = 3)
t_beta_0<- bhat[1]/std.error[1]
t_beta_1<- bhat[2]/std.error[2]
p_beta_1 <-2* pt(2.066, df = n-k,lower.tail=FALSE)
p_beta_0 <-2* pt(t_beta_0, df = n-k,lower.tail=FALSE)
Y_hat <- bhat[1] + bhat[2]*data_tidy_air_quality$traffic_density
residuals <- data_tidy_air_quality$particulate_matter - Y_hat
SSE <- sum(residuals^2)
SST <- sum((data_tidy_air_quality$particulate_matter - Y_bar)^2)
R_squared <- (1 - (SSE / SST))
Adjusted_R_squared <- 1 - ((1 - R_squared) * (n - 1) / (n - 2 - 1))
F_statistic <- (SST - SSE) / (SSE / (n-2))
coefficients <- data.frame(
Estimate = c(bhat[1], bhat[2]),
`Std. Error` = c(std.error[1], std.error[2]),
`t value` = c(t_beta_0, t_beta_1),
`Pr(>|t|)` = c(p_beta_0, p_beta_1)
)
rownames(coefficients) <- c("(Intercept)", "traffic_density")
cat("Coefficients:\n")
print.data.frame(coefficients)
cat("\nResidual standard error:",sqrt(s2),"on 1 and", n-2, "DF" )
cat("\nMultiple R-squared:",R_squared, "Adjusted R-Squared: ",Adjusted_R_squared)
cat("\nF-statistic:",F_statistic, "on 1 and", n-2, "DF")
summary(lm(data_tidy_air_quality$particulate_matter~data_tidy_air_quality$traffic_density,data=data_tidy_air_quality))
n <- length(data_tidy_air_quality$traffic_density)
X_bar <- mean(data_tidy_air_quality$traffic_density)
Y_bar <- mean(data_tidy_air_quality$particulate_matter)
X <- cbind(1,data_tidy_air_quality$traffic_density)
Y <-data_tidy_air_quality$particulate_matter
bhat <- solve(t(X) %*% X) %*% t(X) %*% Y
bhat<- round(bhat,digits = 5)
Cmat <- solve(t(X) %*% X)
k <- ncol(X)
rss <- t(Y - X %*% bhat) %*% (Y - X %*% bhat)
s2 <- as.numeric((rss)/n-k)
c_ii <- diag(Cmat)
std.error <- sqrt(s2 * c_ii)
std.error<-round(std.error,digits = 5)
t_beta_0<- bhat[1]/std.error[1]
t_beta_1<- bhat[2]/std.error[2]
p_beta_1 <-2* pt(2.066, df = n-k,lower.tail=FALSE)
p_beta_0 <-2* pt(t_beta_0, df = n-k,lower.tail=FALSE)
Y_hat <- bhat[1] + bhat[2]*data_tidy_air_quality$traffic_density
residuals <- data_tidy_air_quality$particulate_matter - Y_hat
SSE <- sum(residuals^2)
SST <- sum((data_tidy_air_quality$particulate_matter - Y_bar)^2)
R_squared <- (1 - (SSE / SST))
Adjusted_R_squared <- 1 - ((1 - R_squared) * (n - 1) / (n - 2 - 1))
F_statistic <- (SST - SSE) / (SSE / (n-2))
coefficients <- data.frame(
Estimate = c(bhat[1], bhat[2]),
`Std. Error` = c(std.error[1], std.error[2]),
`t value` = c(t_beta_0, t_beta_1),
`Pr(>|t|)` = c(p_beta_0, p_beta_1)
)
rownames(coefficients) <- c("(Intercept)", "traffic_density")
cat("Coefficients:\n")
print.data.frame(coefficients)
cat("\nResidual standard error:",sqrt(s2),"on 1 and", n-2, "DF" )
cat("\nMultiple R-squared:",R_squared, "Adjusted R-Squared: ",Adjusted_R_squared)
cat("\nF-statistic:",F_statistic, "on 1 and", n-2, "DF")
summary(lm(data_tidy_air_quality$particulate_matter~data_tidy_air_quality$traffic_density,data=data_tidy_air_quality))
n <- length(data_tidy_air_quality$traffic_density)
X_bar <- mean(data_tidy_air_quality$traffic_density)
Y_bar <- mean(data_tidy_air_quality$particulate_matter)
X <- cbind(1,data_tidy_air_quality$traffic_density)
Y <-data_tidy_air_quality$particulate_matter
bhat <- solve(t(X) %*% X) %*% t(X) %*% Y
Cmat <- solve(t(X) %*% X)
k <- ncol(X)
rss <- t(Y - X %*% bhat) %*% (Y - X %*% bhat)
s2 <- as.numeric((rss)/n-k)
c_ii <- diag(Cmat)
std.error <- sqrt(s2 * c_ii)
t_beta_0<- bhat[1]/std.error[1]
t_beta_1<- bhat[2]/std.error[2]
p_beta_1 <-2* pt(t_beta_0, df = n-k,lower.tail=FALSE)
p_beta_0 <-2* pt(t_beta_0, df = n-k,lower.tail=FALSE)
Y_hat <- bhat[1] + bhat[2]*data_tidy_air_quality$traffic_density
residuals <- data_tidy_air_quality$particulate_matter - Y_hat
SSE <- sum(residuals^2)
SST <- sum((data_tidy_air_quality$particulate_matter - Y_bar)^2)
R_squared <- (1 - (SSE / SST))
Adjusted_R_squared <- 1 - ((1 - R_squared) * (n - 1) / (n - 2 - 1))
F_statistic <- (SST - SSE) / (SSE / (n-2))
coefficients <- data.frame(
Estimate = c(bhat[1], bhat[2]),
`Std. Error` = c(std.error[1], std.error[2]),
`t value` = c(t_beta_0, t_beta_1),
`Pr(>|t|)` = c(p_beta_0, p_beta_1)
)
rownames(coefficients) <- c("(Intercept)", "traffic_density")
cat("Coefficients:\n")
print.data.frame(coefficients)
cat("\nResidual standard error:",sqrt(s2),"on 1 and", n-2, "DF" )
cat("\nMultiple R-squared:",R_squared, "Adjusted R-Squared: ",Adjusted_R_squared)
cat("\nF-statistic:",F_statistic, "on 1 and", n-2, "DF")
n <- length(data_tidy_air_quality$traffic_density)
X_bar <- mean(data_tidy_air_quality$traffic_density)
Y_bar <- mean(data_tidy_air_quality$particulate_matter)
X <- cbind(1,data_tidy_air_quality$traffic_density)
Y <-data_tidy_air_quality$particulate_matter
bhat <- solve(t(X) %*% X) %*% t(X) %*% Y
Cmat <- solve(t(X) %*% X)
k <- ncol(X)
rss <- t(Y - X %*% bhat) %*% (Y - X %*% bhat)
s2 <- as.numeric((rss)/n-k)
c_ii <- diag(Cmat)
std.error <- sqrt(s2 * c_ii)
t_beta_0<- bhat[1]/std.error[1]
t_beta_1<- bhat[2]/std.error[2]
p_beta_1 <-2* pt(t_beta_0, df = n-k,lower.tail=FALSE)
p_beta_0 <-2* pt(t_beta_0, df = n-k,lower.tail=FALSE)
Y_hat <- bhat[1] + bhat[2]*data_tidy_air_quality$traffic_density
residuals <- data_tidy_air_quality$particulate_matter - Y_hat
SSE <- sum(residuals^2)
SST <- sum((data_tidy_air_quality$particulate_matter - Y_bar)^2)
R_squared <- (1 - (SSE / SST))
Adjusted_R_squared <- 1 - ((1 - R_squared) * (n - 1) / (n - 2 - 1))
F_statistic <- (SST - SSE) / (SSE / (n-2))
coefficients <- data.frame(
Estimate = c(bhat[1], bhat[2]),
`Std. Error` = c(std.error[1], std.error[2]),
`t value` = c(t_beta_0, t_beta_1),
`Pr(>|t|)` = c(p_beta_0, p_beta_1)
)
rownames(coefficients) <- c("(Intercept)", "traffic_density")
cat("Coefficients:\n")
print.data.frame(coefficients)
cat("\nResidual standard error:",sqrt(s2),"on 1 and", n-2, "DF" )
cat("\nMultiple R-squared:",R_squared, "Adjusted R-Squared: ",Adjusted_R_squared)
cat("\nF-statistic:",F_statistic, "on 1 and", n-2, "DF")
n <- length(data_tidy_air_quality$traffic_density)
X_bar <- mean(data_tidy_air_quality$traffic_density)
Y_bar <- mean(data_tidy_air_quality$particulate_matter)
X <- cbind(1,data_tidy_air_quality$traffic_density)
Y <-data_tidy_air_quality$particulate_matter
bhat <- solve(t(X) %*% X) %*% t(X) %*% Y
Cmat <- solve(t(X) %*% X)
k <- ncol(X)
rss <- t(Y - X %*% bhat) %*% (Y - X %*% bhat)
s2 <- as.numeric((rss)/n-k)
c_ii <- diag(Cmat)
std.error <- sqrt(s2 * c_ii)
t_beta_0<- bhat[1]/std.error[1]
t_beta_1<- bhat[2]/std.error[2]
p_beta_1 <-2* pt(t_beta_0, df = n-k,lower.tail=FALSE)
p_beta_0 <-2* pt(t_beta_0, df = n-k,lower.tail=FALSE)
Y_hat <- bhat[1] + bhat[2]*data_tidy_air_quality$traffic_density
residuals <- data_tidy_air_quality$particulate_matter - Y_hat
SSE <- sum(residuals^2)
SST <- sum((data_tidy_air_quality$particulate_matter - Y_bar)^2)
R_squared <- (1 - (SSE / SST))
Adjusted_R_squared <- 1 - ((1 - R_squared) * (n - 1) / (n - 2 - 1))
F_statistic <- (SST - SSE) / (SSE / (n-2))
coefficients <- data.frame(
Estimate = c(bhat[1], bhat[2]),
`Std. Error` = c(std.error[1], std.error[2]),
`t value` = c(t_beta_0, t_beta_1),
`Pr(>|t|)` = c(p_beta_0, p_beta_1)
)
rownames(coefficients) <- c("(Intercept)", "traffic_density")
cat("Coefficients:\n")
print.data.frame(coefficients)
cat("\nResidual standard error:",sqrt(s2),"on 1 and", n-2, "DF" )
cat("\nMultiple R-squared:",R_squared, "Adjusted R-Squared: ",Adjusted_R_squared)
cat("\nF-statistic:",F_statistic, "on 1 and", n-2, "DF")
#differences in values and lm function values are due to the rounding.
knitr::opts_chunk$set(echo = TRUE)
#| results: hide
#| warning: false
#| message: false
#| error: false
if (!requireNamespace("remotes", quietly = TRUE)) {
install.packages("remotes")
}
remotes::install_github("MiguelRodo/DataTidyRodoSTA2005S")
data("data_tidy_air_quality", package = "DataTidyRodoSTA2005S")
library(ggplot2)
library(tidyr)
library(kableExtra)
data_tidy_air_quality$industrial_activity <- factor(data_tidy_air_quality$industrial_activity,
levels = c("None","Low", "Moderate", "High"))  # Adjust the levels according to your data
data_tidy_air_quality$day_of_week <- factor(data_tidy_air_quality$day_of_week,
levels = c("Monday", "Tuesday", "Wednesday",
"Thursday", "Friday", "Saturday", "Sunday"))
data_tidy_air_quality$holiday <- factor(data_tidy_air_quality$holiday,
levels = c("Yes", "No"))
categorical_vars <- names(data_tidy_air_quality)[sapply(data_tidy_air_quality, is.factor)]
colours_vector <- c("industrial_activity", "day_of_week", "holiday")
for (var in categorical_vars) {
plt<- ggplot(data_tidy_air_quality, aes_string(x = var, y = "particulate_matter")) +
geom_boxplot(fill="deepskyblue3", color="firebrick4", size=1) +
labs(title = paste("Particulate Matter vs", var),
x = var,
y = "Particulate Matter") +
theme_minimal()
print(plt)  # Print the plot
}
dev.off()
dev.off()
dev.off()
install.packages("qpdf")
knitr::opts_chunk$set(echo = TRUE)
#| results: hide
#| warning: false
#| message: false
#| error: false
if (!requireNamespace("remotes", quietly = TRUE)) {
install.packages("remotes")
}
remotes::install_github("MiguelRodo/DataTidyRodoSTA2005S")
data("data_tidy_air_quality", package = "DataTidyRodoSTA2005S")
library(ggplot2)
library(tidyr)
library(kableExtra)
library(qpdf)
# Define the input PDF file
input_pdf <- "Report.pdf"
# Define the output PDF file
output_pdf <- "Report.pdf"
# Specify the pages you want to keep (e.g., keep pages 1, 3, and 5)
qpdf::pdf_subset(input_pdf, output_pdf, pages = c(1,2,3,4,6,7,9,10,11,12,13,14,15,16,17,18))
par(mfrow = c(1, 1))
continuous_vars <- data_tidy_air_quality[, sapply(data_tidy_air_quality, is.numeric)]
pairs(continuous_vars, main = "Pairwise Scatterplots of Continuous Variables", col="deepskyblue3")
par(mfrow = c(1, 1))
while (length(dev.list()) > 0) {
dev.off()
}
continuous_vars <- data_tidy_air_quality[, sapply(data_tidy_air_quality, is.numeric)]
pairs(continuous_vars, main = "Pairwise Scatterplots of Continuous Variables", col="deepskyblue3")
continuous_vars <- data_tidy_air_quality[, sapply(data_tidy_air_quality, is.numeric)]
pairs(continuous_vars, main = "Pairwise Scatterplots of Continuous Variables", col="deepskyblue3")
data_tidy_air_quality$industrial_activity <- factor(data_tidy_air_quality$industrial_activity,
levels = c("None","Low", "Moderate", "High"))  # Adjust the levels according to your data
data_tidy_air_quality$day_of_week <- factor(data_tidy_air_quality$day_of_week,
levels = c("Monday", "Tuesday", "Wednesday",
"Thursday", "Friday", "Saturday", "Sunday"))
data_tidy_air_quality$holiday <- factor(data_tidy_air_quality$holiday,
levels = c("Yes", "No"))
categorical_vars <- names(data_tidy_air_quality)[sapply(data_tidy_air_quality, is.factor)]
colours_vector <- c("industrial_activity", "day_of_week", "holiday")
for (var in categorical_vars) {
plt<- ggplot(data_tidy_air_quality, aes_string(x = var, y = "particulate_matter")) +
geom_boxplot(fill="deepskyblue3", color="firebrick4", size=1) +
labs(title = paste("Particulate Matter vs", var),
x = var,
y = "Particulate Matter") +
theme_minimal()
print(plt)  # Print the plot
}
par(mfrow = c(1, 1))
data_tidy_air_quality$industrial_activity <- factor(data_tidy_air_quality$industrial_activity,
levels = c("None","Low", "Moderate", "High"))  # Adjust the levels according to your data
data_tidy_air_quality$day_of_week <- factor(data_tidy_air_quality$day_of_week,
levels = c("Monday", "Tuesday", "Wednesday",
"Thursday", "Friday", "Saturday", "Sunday"))
data_tidy_air_quality$holiday <- factor(data_tidy_air_quality$holiday,
levels = c("Yes", "No"))
categorical_vars <- names(data_tidy_air_quality)[sapply(data_tidy_air_quality, is.factor)]
colours_vector <- c("industrial_activity", "day_of_week", "holiday")
create_boxplot <- function(var) {
ggplot(data_tidy_air_quality, aes_string(x = var, y = "particulate_matter")) +
geom_boxplot(fill = "deepskyblue3", color = "firebrick4", size = 1) +
labs(title = paste("Particulate Matter vs", var),
x = var,
y = "Particulate Matter") +
theme_minimal()
}
# Use lapply to create a list of plots
plots <- lapply(categorical_vars, create_boxplot)
# Print all plots
invisible(lapply(plots, print))
# Specify the pages you want to keep (e.g., keep pages 1, 3, and 5)
qpdf::pdf_subset(input_pdf, output_pdf, pages = c(1,2, 3,4,6,7,9,10,11,12,13,14,15,16,17,18))
# Define the output PDF file
output_pdf <- "Report.pdf"
# Specify the pages you want to keep (e.g., keep pages 1, 3, and 5)
qpdf::pdf_subset(input_pdf, output_pdf, pages = c(1,2, 3,4,6,7,9,10,11,12,13,14,15,16,17,18))
library(qpdf)
# Define the input PDF file
input_pdf <- "Report.pdf"
# Define the output PDF file
output_pdf <- "Report.pdf"
# Specify the pages you want to keep (e.g., keep pages 1, 3, and 5)
qpdf::pdf_subset(input_pdf, output_pdf, pages = c(1,2, 3,4,6,7,9,10,11,12,13,14,15,16,17,18))
library(qpdf)
# Define the input PDF file
input_pdf <- "Report.pdf"
# Define the output PDF file
output_pdf <- "Report.pdf"
# Specify the pages you want to keep (e.g., keep pages 1, 3, and 5)
qpdf::pdf_subset(input_pdf, output_pdf, pages = c(1,2, 3,4,6,7,9,10,11,12,13,14,15,16,17,18))
knitr::opts_chunk$set(echo = TRUE)
#| results: hide
#| warning: false
#| message: false
#| error: false
if (!requireNamespace("remotes", quietly = TRUE)) {
install.packages("remotes")
}
remotes::install_github("MiguelRodo/DataTidyRodoSTA2005S")
data("data_tidy_air_quality", package = "DataTidyRodoSTA2005S")
library(ggplot2)
library(tidyr)
library(kableExtra)
library(vcd)
mean_particle <- mean(data_tidy_air_quality$particulate_matter)
sd_particle <- sd(data_tidy_air_quality$particulate_matter)
ggplot(data_tidy_air_quality, aes(x=particulate_matter))+
geom_histogram(fill="deepskyblue3", color="black", binwidth = 3, aes(y=..density..))+
stat_function(fun=dnorm, args=list(mean=mean_particle, sd=sd_particle), color="firebrick4", size=1.2)+
labs(title="Density Plot of Particulate Matter", y="Density", x="Particulate Matter")
par(mfrow = c(1, 1))
