}
# Calculate Type I error rate (proportion of times the null was incorrectly rejected)
type_1_error_rate <- reject_null
# Output the Type I error rate
type_1_error_rate
library(tidyverse)
# Set the seed for reproducibility
set.seed(123)
# Number of simulations
n_simulations <- 1000
temperature <- data_tidy_air_quality$temperature
# Initialize a vector to store whether the null hypothesis was rejected in each simulation
reject_null <- 0
# Variance of the uniform distribution needs to be 100, so we calculated b = 17.32
a <- -17.32
b <- 17.32
# Run simulations
for (i in 1:n_simulations) {
# Generate error term e ~ Uniform(a, b)
e <- runif(length(temperature), min = a, max = b)
# Generate Y = 30 + e (since β1 = 0)
Y <- 30 + e
# Fit the linear model Y = β0 + β1 * temperature
model <- lm(Y ~ temperature)
# Perform hypothesis test on β1 (null hypothesis: β1 = 0)
p_value <- summary(model)$coefficients[2, 4]
p_value
# Record if the null hypothesis is rejected (α = 0.05)
reject_null[i] <- ifelse(p_value < 0.05, 1, 0)
}
# Calculate Type I error rate (proportion of times the null was incorrectly rejected)
type_1_error_rate <-
# Output the Type I error rate
type_1_error_rate
library(tidyverse)
# Set the seed for reproducibility
set.seed(123)
# Number of simulations
n_simulations <- 1000
temperature <- data_tidy_air_quality$temperature
# Initialize a vector to store whether the null hypothesis was rejected in each simulation
reject_null <- 0
# Variance of the uniform distribution needs to be 100, so we calculated b = 17.32
a <- -17.32
b <- 17.32
# Run simulations
for (i in 1:n_simulations) {
# Generate error term e ~ Uniform(a, b)
e <- runif(length(temperature), min = a, max = b)
# Generate Y = 30 + e (since β1 = 0)
Y <- 30 + e
# Fit the linear model Y = β0 + β1 * temperature
model <- lm(Y ~ temperature)
# Perform hypothesis test on β1 (null hypothesis: β1 = 0)
p_value <- summary(model)$coefficients[2, 4]
# Record if the null hypothesis is rejected (α = 0.05)
reject_null[i] <- ifelse(p_value < 0.05, 1, 0)
}
# Calculate Type I error rate (proportion of times the null was incorrectly rejected)
type_1_error_rate <-
# Output the Type I error rate
type_1_error_rate
summary(model)$coefficients[2, 4]
summary(model)
library(tidyverse)
# Set the seed for reproducibility
set.seed(123)
# Number of simulations
n_simulations <- 1000
temperature <- data_tidy_air_quality$temperature
# Initialize a vector to store whether the null hypothesis was rejected in each simulation
reject_null <- numeric(n_simulations)
# Variance of the uniform distribution needs to be 100, so we calculated b = 17.32
a <- -17.32
b <- 17.32
# Run simulations
for (i in 1:n_simulations) {
# Generate error term e ~ Uniform(a, b)
e <- runif(length(temperature), min = a, max = b)
# Generate Y = 30 + e (since β1 = 0)
Y <- 30 + e
# Fit the linear model Y = β0 + β1 * temperature
model <- lm(Y ~ temperature)
# Perform hypothesis test on β1 (null hypothesis: β1 = 0)
p_value <- summary(model)$coefficients[2, 4]
# Record if the null hypothesis is rejected (α = 0.05)
reject_null[i] <- ifelse(p_value < 0.05, 1, 0)
}
# Calculate Type I error rate (proportion of times the null was incorrectly rejected)
type_1_error_rate <- sum(reject_null)
# Output the Type I error rate
type_1_error_rate
library(tidyverse)
# Set the seed for reproducibility
set.seed(123)
# Number of simulations
n_simulations <- 1000
temperature <- data_tidy_air_quality$temperature
# Initialize a vector to store whether the null hypothesis was rejected in each simulation
reject_null <- numeric(n_simulations)
# Variance of the uniform distribution needs to be 100, so we calculated b = 17.32
a <- -17.32
b <- 17.32
# Run simulations
for (i in 1:n_simulations) {
# Generate error term e ~ Uniform(a, b)
e <- runif(length(temperature), min = a, max = b)
# Generate Y = 30 + e (since β1 = 0)
Y <- 30 + e
# Fit the linear model Y = β0 + β1 * temperature
model <- lm(Y ~ temperature)
# Perform hypothesis test on β1 (null hypothesis: β1 = 0)
p_value <- summary(model)$coefficients[2, 4]
# Record if the null hypothesis is rejected (α = 0.05)
reject_null[i] <- ifelse(p_value < 0.05, 1, 0)
}
# Calculate Type I error rate (proportion of times the null was incorrectly rejected)
type_1_error_rate <-(1000-sum(reject_null))/1000
# Output the Type I error rate
type_1_error_rate
set.seed(123)  # For reproducibility
reject_null <- numeric(n_sim)  # To store whether the null hypothesis is rejected
set.seed(123)  # For reproducibility
reject_null <- numeric(n_simulations)  # To store whether the null hypothesis is rejected
for (i in 1:n_simulations) {
# Simulate heteroscedastic errors with variance mean 100 and variance 50
# We will simulate variance for each observation from a normal distribution
variances <- rnorm(n, mean = 100, sd = sqrt(50))  # Variance of each error
e <- rnorm(n, mean = 0, sd = sqrt(variances))     # Simulated errors with heteroscedasticity
# Generate Y values under null hypothesis (beta_1 = 0)
Y <- 30 + e
# Fit the model Y ~ temperature
model <- lm(Y ~ temperature)
# Perform hypothesis test for beta_1 (test if beta_1 = 0)
p_value <- summary(model)$coefficients[2, 4]  # Extract p-value for temperature
# Record whether the null hypothesis is rejected (p-value < 0.05)
reject_null[i] <- (p_value < 0.05)
}
set.seed(123)  # For reproducibility
reject_null <- numeric(n_simulations)  # To store whether the null hypothesis is rejected
for (i in 1:n_simulations) {
# Simulate heteroscedastic errors with variance mean 100 and variance 50
# We will simulate variance for each observation from a normal distribution
variances <- rnorm(n, mean = 100, sd = sqrt(50))  # Variance of each error
e <- rnorm(1000, mean = 0, sd = sqrt(variances))     # Simulated errors with heteroscedasticity
# Generate Y values under null hypothesis (beta_1 = 0)
Y <- 30 + e
# Fit the model Y ~ temperature
model <- lm(Y ~ temperature)
# Perform hypothesis test for beta_1 (test if beta_1 = 0)
p_value <- summary(model)$coefficients[2, 4]  # Extract p-value for temperature
# Record whether the null hypothesis is rejected (p-value < 0.05)
reject_null[i] <- (p_value < 0.05)
}
set.seed(123)  # For reproducibility
reject_null <- numeric(n_simulations)  # To store whether the null hypothesis is rejected
for (i in 1:n_simulations) {
# Simulate heteroscedastic errors with variance mean 100 and variance 50
# We will simulate variance for each observation from a normal distribution
variances <- rnorm(n, mean = 100, sd = sqrt(50))  # Variance of each error
e <- rnorm(n_simulations, mean = 0, sd = sqrt(variances))     # Simulated errors with heteroscedasticity
# Generate Y values under null hypothesis (beta_1 = 0)
Y <- 30 + e
# Fit the model Y ~ temperature
model <- lm(Y ~ temperature)
# Perform hypothesis test for beta_1 (test if beta_1 = 0)
p_value <- summary(model)$coefficients[2, 4]  # Extract p-value for temperature
# Record whether the null hypothesis is rejected (p-value < 0.05)
reject_null[i] <- (p_value < 0.05)
}
set.seed(123)  # For reproducibility
reject_null <- numeric(n_simulations)  # To store whether the null hypothesis is rejected
for (i in 1:n_simulations) {
# Simulate heteroscedastic errors with variance mean 100 and variance 50
# We will simulate variance for each observation from a normal distribution
variances <- rnorm(n, mean = 100, sd = sqrt(50))  #
#Variance of each error
e <- rnorm(n_simulations, mean = 0, sd = sqrt(variances))     # Simulated errors with heteroscedasticity
# Generate Y values under null hypothesis (beta_1 = 0)
Y <- 30 + e
# Fit the model Y ~ temperature
model <- lm(Y ~ temperature)
# Perform hypothesis test for beta_1 (test if beta_1 = 0)
p_value <- summary(model)$coefficients[2, 4]  # Extract p-value for temperature
# Record whether the null hypothesis is rejected (p-value < 0.05)
reject_null[i] <- (p_value < 0.05)
}
variances <- rnorm(n, mean = 100, sd = sqrt(50))  #
set.seed(123)  # For reproducibility
reject_null <- numeric(n_simulations)  # To store whether the null hypothesis is rejected
for (i in 1:n_simulations) {
# Simulate heteroscedastic errors with variance mean 100 and variance 50
# We will simulate variance for each observation from a normal distribution
variances <- rnorm(1, mean = 100, sd = sqrt(50))  #
variances
#Variance of each error
e <- rnorm(n_simulations, mean = 0, sd = sqrt(variances))     # Simulated errors with heteroscedasticity
# Generate Y values under null hypothesis (beta_1 = 0)
Y <- 30 + e
# Fit the model Y ~ temperature
model <- lm(Y ~ temperature)
# Perform hypothesis test for beta_1 (test if beta_1 = 0)
p_value <- summary(model)$coefficients[2, 4]  # Extract p-value for temperature
# Record whether the null hypothesis is rejected (p-value < 0.05)
reject_null[i] <- (p_value < 0.05)
}
set.seed(123)  # For reproducibility
reject_null <- numeric(n_simulations)  # To store whether the null hypothesis is rejected
for (i in 1:n_simulations) {
# Simulate heteroscedastic errors with variance mean 100 and variance 50
# We will simulate variance for each observation from a normal distribution
variances <- rnorm(1, mean = 100, sd = sqrt(50))  #
variances
#Variance of each error
e <- rnorm(1, mean = 0, sd = sqrt(variances))     # Simulated errors with heteroscedasticity
# Generate Y values under null hypothesis (beta_1 = 0)
Y <- 30 + e
# Fit the model Y ~ temperature
model <- lm(Y ~ temperature)
# Perform hypothesis test for beta_1 (test if beta_1 = 0)
p_value <- summary(model)$coefficients[2, 4]  # Extract p-value for temperature
# Record whether the null hypothesis is rejected (p-value < 0.05)
reject_null[i] <- (p_value < 0.05)
}
variances <- rnorm(1, mean = 100, sd = sqrt(50))  #
variances
variances <- rnorm(1, mean = 100, sd = sqrt(50))  #
variances
e <- rnorm(1, mean = 0, sd = sqrt(variances))
e
e <- rnorm(1, mean = 0, sd = sqrt(variances))
e
e <- rnorm(1, mean = 0, sd = sqrt(variances))
e
Y <- 30 + e
Y
set.seed(123)  # For reproducibility
reject_null <- numeric(n_simulations)  # To store whether the null hypothesis is rejected
for (i in 1:n_simulations) {
# Simulate heteroscedastic errors with variance mean 100 and variance 50
# We will simulate variance for each observation from a normal distribution
variances <- rnorm(1, mean = 100, sd = sqrt(50))  #
variances
#Variance of each error
e <- rnorm(1, mean = 0, sd = sqrt(variances))
e
# Simulated errors with heteroscedasticity
# Generate Y values under null hypothesis (beta_1 = 0)
Y <- 30 + e
Y
# Fit the model Y ~ temperature
model <- lm(Y ~ temperature)
# Perform hypothesis test for beta_1 (test if beta_1 = 0)
p_value <- summary(model)$coefficients[2, 4]  # Extract p-value for temperature
# Record whether the null hypothesis is rejected (p-value < 0.05)
reject_null[i] <- (p_value < 0.05)
}
set.seed(123)  # For reproducibility
# Load data (assuming temperature values are stored in 'temperature' variable)
temperature <- data_tidy_air_quality$temperature
n <- length(temperature)  # Number of observations in temperature data
reject_null <- numeric(n_simulations)  # To store whether the null hypothesis is rejected
for (i in 1:n_sim) {
# Simulate heteroscedastic errors with mean variance 100 and variance of the variances = 50
# Generate different variances for each observation, ensuring mean is 100 and variance is 50
variances <- rnorm(n, mean = 100, sd = sqrt(50))  # Variance of each error term
e <- rnorm(n, mean = 0, sd = sqrt(abs(variances)))  # Simulated errors with heteroscedasticity
# Generate Y values under null hypothesis (beta_1 = 0)
Y <- 30 + e
# Fit the model Y ~ temperature
model <- lm(Y ~ temperature)
# Perform hypothesis test for beta_1 (test if beta_1 = 0)
p_value <- summary(model)$coefficients[2, 4]  # Extract p-value for temperature coefficient
# Record whether the null hypothesis is rejected (p-value < 0.05)
reject_null[i] <- as.numeric(p_value < 0.05)
}
set.seed(123)  # For reproducibility
# Load data (assuming temperature values are stored in 'temperature' variable)
temperature <- data_tidy_air_quality$temperature
n <- length(temperature)  # Number of observations in temperature data
reject_null <- numeric(n_simulations)  # To store whether the null hypothesis is rejected
for (i in 1:n_simulations) {
# Simulate heteroscedastic errors with mean variance 100 and variance of the variances = 50
# Generate different variances for each observation, ensuring mean is 100 and variance is 50
variances <- rnorm(n, mean = 100, sd = sqrt(50))  # Variance of each error term
e <- rnorm(n, mean = 0, sd = sqrt(abs(variances)))  # Simulated errors with heteroscedasticity
# Generate Y values under null hypothesis (beta_1 = 0)
Y <- 30 + e
# Fit the model Y ~ temperature
model <- lm(Y ~ temperature)
# Perform hypothesis test for beta_1 (test if beta_1 = 0)
p_value <- summary(model)$coefficients[2, 4]  # Extract p-value for temperature coefficient
# Record whether the null hypothesis is rejected (p-value < 0.05)
reject_null[i] <- as.numeric(p_value < 0.05)
}
# Calculate the Type I error rate (proportion of rejected null hypotheses)
type_1_error_rate <- mean(reject_null)
# Print the Type I error rate
type_1_error_rate
set.seed(123)  # For reproducibility
# Load data (assuming temperature values are stored in 'temperature' variable)
temperature <- data_tidy_air_quality$temperature
n <- length(temperature)  # Number of observations in temperature data
reject_null <- numeric(n_simulations)  # To store whether the null hypothesis is rejected
for (i in 1:n_simulations) {
# Simulate heteroscedastic errors with mean variance 100 and variance of the variances = 50
# Generate different variances for each observation, ensuring mean is 100 and variance is 50
variances <- rnorm(n, mean = 100, sd = sqrt(50))  # Variance of each error term
e <- rnorm(n, mean = 0, sd = sqrt(abs(variances)))  # Simulated errors with heteroscedasticity
# Generate Y values under null hypothesis (beta_1 = 0)
Y <- 30 + e
# Fit the model Y ~ temperature
model <- lm(Y ~ temperature)
# Perform hypothesis test for beta_1 (test if beta_1 = 0)
p_value <- summary(model)$coefficients[2, 4]  # Extract p-value for temperature coefficient
# Record whether the null hypothesis is rejected (p-value < 0.05)
reject_null[i] <- as.numeric(p_value < 0.05)
}
# Calculate the Type I error rate (proportion of rejected null hypotheses)
type_1_error_rate <- (1000-sum(reject_null))/1000
# Print the Type I error rate
type_1_error_rate
set.seed(123)  # For reproducibility
# Load data (assuming temperature values are stored in 'temperature' variable)
temperature <- data_tidy_air_quality$temperature
n <- length(temperature)  # Number of observations in temperature data
n_sim <- 1000  # Number of simulations
# Function to generate autocorrelated errors
generate_ar1_errors <- function(n, rho, var_epsilon) {
sigma_u_squared <- var_epsilon * (1 - rho^2)
u <- rnorm(n, mean = 0, sd = sqrt(sigma_u_squared))
epsilon <- numeric(n)
epsilon[1] <- u[1]
for (i in 2:n) {
epsilon[i] <- rho * epsilon[i - 1] + u[i]
}
epsilon
}
rho <- 0.3  # Autocorrelation coefficient
var_epsilon <- 100  # Desired variance of errors
reject_null <- numeric(n_sim)  # To store whether the null hypothesis is rejected
for (i in 1:n_sim) {
# Generate autocorrelated errors with Corr(epsilon_i, epsilon_(i+1)) = 0.3
e <- generate_ar1_errors(n, rho, var_epsilon)
# Generate Y values under null hypothesis (beta_1 = 0)
Y <- 30 + e
# Fit the model Y ~ temperature
model <- lm(Y ~ temperature)
# Perform hypothesis test for beta_1 (test if beta_1 = 0)
p_value <- summary(model)$coefficients[2, 4]  # Extract p-value for temperature coefficient
# Record whether the null hypothesis is rejected (p-value < 0.05)
reject_null[i] <- as.numeric(p_value < 0.05)
}
# Calculate the Type I error rate (proportion of rejected null hypotheses)
type_1_error_rate <- mean(reject_null)
# Print the Type I error rate
type_1_error_rate
set.seed(123)  # For reproducibility
# Load data (assuming temperature values are stored in 'temperature' variable)
temperature <- data_tidy_air_quality$temperature
n <- length(temperature)  # Number of observations in temperature data
n_sim <- 1000  # Number of simulations
# Function to generate autocorrelated errors
generate_ar1_errors <- function(n, rho, var_epsilon) {
sigma_u_squared <- var_epsilon * (1 - rho^2)
u <- rnorm(n, mean = 0, sd = sqrt(sigma_u_squared))
epsilon <- numeric(n)
epsilon[1] <- u[1]
for (i in 2:n) {
epsilon[i] <- rho * epsilon[i - 1] + u[i]
}
epsilon
}
rho <- 0.3  # Autocorrelation coefficient
var_epsilon <- 100  # Desired variance of errors
reject_null <- numeric(n_sim)  # To store whether the null hypothesis is rejected
for (i in 1:n_sim) {
# Generate autocorrelated errors with Corr(epsilon_i, epsilon_(i+1)) = 0.3
e <- generate_ar1_errors(n, rho, var_epsilon)
# Generate Y values under null hypothesis (beta_1 = 0)
Y <- 30 + e
# Fit the model Y ~ temperature
model <- lm(Y ~ temperature)
# Perform hypothesis test for beta_1 (test if beta_1 = 0)
p_value <- summary(model)$coefficients[2, 4]  # Extract p-value for temperature coefficient
# Record whether the null hypothesis is rejected (p-value < 0.05)
reject_null[i] <- as.numeric(p_value < 0.05)
}
# Calculate the Type I error rate (proportion of rejected null hypotheses)
type_1_error_rate <- (1000-mean(reject_null))/1000
# Print the Type I error rate
type_1_error_rate
set.seed(123)  # For reproducibility
# Load data (assuming temperature values are stored in 'temperature' variable)
temperature <- data_tidy_air_quality$temperature
n <- length(temperature)  # Number of observations in temperature data
n_sim <- 1000  # Number of simulations
# Function to generate autocorrelated errors
generate_ar1_errors <- function(n, rho, var_epsilon) {
sigma_u_squared <- var_epsilon * (1 - rho^2)
u <- rnorm(n, mean = 0, sd = sqrt(sigma_u_squared))
epsilon <- numeric(n)
epsilon[1] <- u[1]
for (i in 2:n) {
epsilon[i] <- rho * epsilon[i - 1] + u[i]
}
epsilon
}
rho <- 0.3  # Autocorrelation coefficient
var_epsilon <- 100  # Desired variance of errors
reject_null <- numeric(n_sim)  # To store whether the null hypothesis is rejected
for (i in 1:n_sim) {
# Generate autocorrelated errors with Corr(epsilon_i, epsilon_(i+1)) = 0.3
e <- generate_ar1_errors(n, rho, var_epsilon)
# Generate Y values under null hypothesis (beta_1 = 0)
Y <- 30 + e
# Fit the model Y ~ temperature
model <- lm(Y ~ temperature)
# Perform hypothesis test for beta_1 (test if beta_1 = 0)
p_value <- summary(model)$coefficients[2, 4]  # Extract p-value for temperature coefficient
# Record whether the null hypothesis is rejected (p-value < 0.05)
reject_null[i] <- as.numeric(p_value < 0.05)
}
# Calculate the Type I error rate (proportion of rejected null hypotheses)
type_1_error_rate <- (1000-sum(reject_null))/1000
# Print the Type I error rate
type_1_error_rate
library(tidyverse)
# Set the seed for reproducibility
set.seed(123)
# Number of simulations
n_simulations <- 1000
temperature <- data_tidy_air_quality$temperature
# Initialize a vector to store whether the null hypothesis was rejected in each simulation
reject_null <- numeric(n_simulations)
# Variance of the uniform distribution needs to be 100, so we calculated b = 17.32
a <- -17.32
b <- 17.32
# Run simulations
for (i in 1:n_simulations) {
# Generate error term e ~ Uniform(a, b)
e <- runif(length(temperature), min = a, max = b)
# Generate Y = 30 + e (since β1 = 0)
Y <- 30 + e
# Fit the linear model Y = β0 + β1 * temperature
model <- lm(Y ~ temperature)
# Perform hypothesis test on β1 (null hypothesis: β1 = 0) and extract from lm
p_value <- summary(model)$coefficients[2, 4]
# Record if the null hypothesis is rejected (α = 0.05)
reject_null[i] <- ifelse(p_value > 0.05, 1, 0)
}
# Calculate Type I error rate (proportion of times the null was incorrectly rejected)
type_1_error_rate <-(1000-sum(reject_null))/1000
# Output the Type I error rate
type_1_error_rate
library(tidyverse)
# Set the seed for reproducibility
set.seed(123)
# Number of simulations
n_simulations <- 1000
temperature <- data_tidy_air_quality$temperature
# Initialize a vector to store whether the null hypothesis was rejected in each simulation
reject_null <- numeric(n_simulations)
# Variance of the uniform distribution needs to be 100, so we calculated b = 17.32
a <- -17.32
b <- 17.32
# Run simulations
for (i in 1:n_simulations) {
# Generate error term e ~ Uniform(a, b)
e <- runif(length(temperature), min = a, max = b)
# Generate Y = 30 + e (since β1 = 0)
Y <- 30 + e
# Fit the linear model Y = β0 + β1 * temperature
model <- lm(Y ~ temperature)
# Perform hypothesis test on β1 (null hypothesis: β1 = 0) and extract from lm
p_value <- summary(model)$coefficients[2, 4]
# Record if the null hypothesis is rejected (α = 0.05)
reject_null[i] <- ifelse(p_value < 0.05, 1, 0)
}
# Calculate Type I error rate (proportion of times the null was incorrectly rejected)
type_1_error_rate <-(1000-sum(reject_null))/1000
# Output the Type I error rate
type_1_error_rate
library(tidyverse)
# Set the seed for reproducibility
set.seed(123)
# Number of simulations
n_simulations <- 1000
temperature <- data_tidy_air_quality$temperature
# Initialize a vector to store whether the null hypothesis was rejected in each simulation
reject_null <- numeric(n_simulations)
# Variance of the uniform distribution needs to be 100, so we calculated b = 17.32
a <- -17.32
b <- 17.32
# Run simulations
for (i in 1:5) {
# Generate error term e ~ Uniform(a, b)
e <- runif(length(temperature), min = a, max = b)
# Generate Y = 30 + e (since β1 = 0)
Y <- 30 + e
# Fit the linear model Y = β0 + β1 * temperature
model <- lm(Y ~ temperature)
# Perform hypothesis test on β1 (null hypothesis: β1 = 0) and extract from lm
p_value <- summary(model)$coefficients[2, 4]
p_value
# Record if the null hypothesis is rejected (α = 0.05)
reject_null[i] <- ifelse(p_value < 0.05, 1, 0)
}
# Calculate Type I error rate (proportion of times the null was incorrectly rejected)
type_1_error_rate <-(1000-sum(reject_null))/1000
# Output the Type I error rate
type_1_error_rate
